{"version":3,"file":"7768.295c6fe4f150e611cc77.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUnreadMentions,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: oldTranslate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds, users, chats,\n      } = result;\n\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n      global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateLocalTextSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    chats, users, messages,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectPeer,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (peer.profilePhotos && !shouldInvalidateCache && (isPreload || !peer.profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = peer.profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, users, count, nextOffsetId,\n  } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      users, chats, accountResultIds, globalResultIds,\n    } = result;\n\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive || !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, appendStarsTransactions, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateReceiptFromStarsTransaction,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users,\n  } = result;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('getStarsReceipt', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return updateReceiptFromStarsTransaction(global, transaction, tabId);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(status.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(status.users, 'id'));\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice, updatePayment } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME, DEBUG } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  type: 'story';\n  peerId: string;\n  id: number;\n};\n\nexport type MessageRepairInfo = {\n  type: 'message';\n  peerId: string;\n  id: number;\n};\n\nexport type RepairInfo = {\n  localRepairInfo?: StoryRepairInfo | MessageRepairInfo;\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  documents: Record<string, GramJs.Document & RepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & RepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n\nif (DEBUG) {\n  (globalThis as any).getLocalDb = () => localDb;\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiFactCheck,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiPoll,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  type MediaRepairContext,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiFormattedText,\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  return {\n    randomId: serializeBytes(randomId),\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n    peerId: buildPeer(mtpMessage.out ? buildApiPeerId(mtpMessage.userId, 'user') : currentUserId),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n    peerId: buildPeer(buildApiPeerId(mtpMessage.chatId, 'chat')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date' | 'peerId')>\n  & Partial<GramJs.Message & GramJs.MessageService>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n  const factCheck = mtpMessage.factcheck && buildApiFactCheck(mtpMessage.factcheck);\n\n  const isInvertedMedia = mtpMessage.invertMedia;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo, mtpMessage) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n    factCheck,\n    effectId: mtpMessage.effect?.toString(),\n    isInvertedMedia,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date, effect,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n    effectId: effect?.toString(),\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(\n  replyHeader: GramJs.TypeMessageReplyHeader, context?: MediaRepairContext,\n): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia, context),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiFactCheck(factCheck: GramJs.FactCheck): ApiFactCheck {\n  return {\n    shouldFetch: factCheck.needCheck,\n    hash: factCheck.hash.toString(),\n    text: factCheck.text && buildApiFormattedText(factCheck.text),\n    countryCode: factCheck.country,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    type = 'receipt';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    mediaType: 'action',\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number): ApiPoll {\n  return {\n    mediaType: 'poll',\n    id: String(localId),\n    summary: pick(poll.summary, ['question', 'answers']),\n    results: {},\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n  isInvertedMedia?: true,\n  effectId?: string,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      poll: poll && buildNewPoll(poll, localId),\n      contact,\n      storyData: story && {\n        mediaType: 'storyData',\n        ...story,\n      },\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n    isInvertedMedia,\n    effectId,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n    isInvertedMedia,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    isInvertedMedia,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            mediaType: 'photo',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            date: Math.round(Date.now() / 1000),\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            mediaType: 'video',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          mediaType: 'voice',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n          size,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          mediaType: 'audio',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mediaType: 'document',\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.loadChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          mediaType: 'action',\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n          profilePhotos: undefined,\n        });\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        {isSearchFocused &&\n          <DropdownMenu\n            trigger={MainButton}\n            footer={`${APP_NAME} ${versionString}`}\n            className={buildClassName(\n              'main-menu',\n              lang.isRtl && 'rtl',\n              shouldHideSearch && lang.isRtl && 'right-aligned',\n              shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n              /**\n               * TL - Trigger hide hamburger menu when search input focused in\n               */\n              isSearchFocused ? 'custom-dropdown-invisible' : 'custom-dropdown-visible',\n            )}\n            positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n            transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            {/* {menuItems} */}\n          </DropdownMenu>\n        }\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  shouldDelayInit?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  shouldDelayInit,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n        shouldDelayInit={shouldDelayInit}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  getIsMessageListReady: Signal<boolean>;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const isMessageListReady = useDerivedState(getIsMessageListReady);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        getIsMessageListReady={getIsMessageListReady}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {/* {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )} */}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            getIsMessageListReady={getIsMessageListReady}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isRevenueSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n  areAdsEnabled,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from \"../../lib/teact/teact\";\nimport { getActions, withGlobal } from \"../../global\";\n\nimport type {\n  ApiChat,\n  ApiChatBannedRights,\n  ApiInputMessageReplyInfo,\n} from \"../../api/types\";\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from \"../../global/types\";\nimport type { ThemeKey, ThreadId } from \"../../types\";\nimport { MAIN_THREAD_ID } from \"../../api/types\";\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from \"../../config\";\nimport { requestMeasure, requestMutation } from \"../../lib/fasterdom/fasterdom\";\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from \"../../global/helpers\";\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from \"../../global/selectors\";\nimport buildClassName from \"../../util/buildClassName\";\nimport buildStyle from \"../../util/buildStyle\";\nimport captureEscKeyListener from \"../../util/captureEscKeyListener\";\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from \"../../util/windowEnvironment\";\nimport calculateMiddleFooterTransforms from \"./helpers/calculateMiddleFooterTransforms\";\n\nimport useAppLayout from \"../../hooks/useAppLayout\";\nimport useCustomBackground from \"../../hooks/useCustomBackground\";\nimport useForceUpdate from \"../../hooks/useForceUpdate\";\nimport useHistoryBack from \"../../hooks/useHistoryBack\";\nimport useLastCallback from \"../../hooks/useLastCallback\";\nimport useOldLang from \"../../hooks/useOldLang\";\nimport usePrevDuringAnimation from \"../../hooks/usePrevDuringAnimation\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport { useResize } from \"../../hooks/useResize\";\nimport useSyncEffect from \"../../hooks/useSyncEffect\";\nimport useWindowSize from \"../../hooks/window/useWindowSize\";\nimport usePinnedMessage from \"./hooks/usePinnedMessage\";\n\nimport Composer from \"../common/Composer\";\nimport PrivacySettingsNoticeModal from \"../common/PrivacySettingsNoticeModal.async\";\nimport SeenByModal from \"../common/SeenByModal.async\";\nimport UnpinAllMessagesModal from \"../common/UnpinAllMessagesModal.async\";\nimport GiftPremiumModal from \"../main/premium/GiftPremiumModal.async\";\nimport Button from \"../ui/Button\";\nimport Transition from \"../ui/Transition\";\nimport ChatLanguageModal from \"./ChatLanguageModal.async\";\nimport { DropAreaState } from \"./composer/DropArea\";\nimport EmojiInteractionAnimation from \"./EmojiInteractionAnimation.async\";\nimport FloatingActionButtons from \"./FloatingActionButtons\";\nimport MessageList from \"./MessageList\";\nimport MessageSelectToolbar from \"./MessageSelectToolbar.async\";\nimport MiddleHeader from \"./MiddleHeader\";\nimport MobileSearch from \"./MobileSearch.async\";\nimport PremiumRequiredPlaceholder from \"./PremiumRequiredPlaceholder\";\nimport ReactorListModal from \"./ReactorListModal.async\";\n\nimport \"./MiddleColumn.scss\";\nimport styles from \"./MiddleColumn.module.scss\";\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile\n    ? LAYER_ANIMATION_DURATION_MS\n    : undefined;\n  const hasTools =\n    hasPinned &&\n    (windowWidth < MOBILE_SCREEN_MAX_WIDTH ||\n      hasAudioPlayer ||\n      (isRightColumnShown &&\n        windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN &&\n        windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) ||\n      (!isMobile &&\n        hasButtonInHeader &&\n        windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES));\n\n  const renderingChatId = usePrevDuringAnimation(\n    chatId,\n    closeAnimationDuration\n  );\n  const renderingThreadId = usePrevDuringAnimation(\n    threadId,\n    closeAnimationDuration\n  );\n  const renderingMessageListType = usePrevDuringAnimation(\n    messageListType,\n    closeAnimationDuration\n  );\n  const renderingCanSubscribe = usePrevDuringAnimation(\n    canSubscribe,\n    closeAnimationDuration\n  );\n  const renderingCanStartBot = usePrevDuringAnimation(\n    canStartBot,\n    closeAnimationDuration\n  );\n  const renderingCanRestartBot = usePrevDuringAnimation(\n    canRestartBot,\n    closeAnimationDuration\n  );\n  const renderingCanUnblock = usePrevDuringAnimation(\n    canUnblock,\n    closeAnimationDuration\n  );\n  const renderingCanPost =\n    usePrevDuringAnimation(canPost, closeAnimationDuration) &&\n    !renderingCanRestartBot &&\n    !renderingCanStartBot &&\n    !renderingCanSubscribe &&\n    !renderingCanUnblock &&\n    chatId !== TMP_CHAT_ID &&\n    !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(\n    hasTools,\n    closeAnimationDuration\n  );\n  const renderingIsScrollDownShown =\n    usePrevDuringAnimation(isScrollDownShown, closeAnimationDuration) &&\n    chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(\n    isChannel,\n    closeAnimationDuration\n  );\n  const renderingShouldJoinToSend = usePrevDuringAnimation(\n    shouldJoinToSend,\n    closeAnimationDuration\n  );\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(\n    shouldSendJoinRequest,\n    closeAnimationDuration\n  );\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey =\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey\n      ? prevTransitionKey\n      : undefined;\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } =\n    useIsReady(\n      !shouldSkipHistoryAnimations && withInterfaceAnimations,\n      currentTransitionKey,\n      prevTransitionKey,\n      chatId,\n      isMobile\n    );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n          openChat({ id: undefined });\n        })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded =\n        visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle(\"keyboard-visible\", isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      visualViewport.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const { initResize, resetResize, handleMouseUp } = useResize(\n    leftColumnRef,\n    (n) =>\n      setLeftColumnWidth({\n        leftColumnWidth: n,\n      }),\n    resetLeftColumnWidth,\n    leftColumnWidth,\n    \"--left-column-width\"\n  );\n\n  const handleDragEnter = useLastCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      const { items } = e.dataTransfer || {};\n      const shouldDrawQuick =\n        items &&\n        items.length > 0 &&\n        Array.from(items)\n          // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n          // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n          .filter((item) => item.type !== \"text/uri-list\")\n          // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n          .every(isImage);\n\n      setDropAreaState(\n        shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document\n      );\n    }\n  );\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? lang(\"RequestToJoinChannelSentDescription\")\n          : lang(\"RequestToJoinGroupSentDescription\"),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: \"/start\" });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && \"has-header-tools\",\n    MASK_IMAGE_DISABLED ? \"mask-image-disabled\" : \"mask-image-enabled\"\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    \"messaging-disabled\",\n    !isSelectModeActive && \"shown\"\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang,\n    currentUserBannedRights,\n    defaultBannedRights\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    lang,\n    chat,\n    threadId,\n    Boolean(draftReplyInfo)\n  );\n\n  const composerRestrictionMessage =\n    messageSendingRestrictionReason ??\n    forumComposerPlaceholder ??\n    (isContactRequirePremium ? (\n      <PremiumRequiredPlaceholder userId={chatId!} />\n    ) : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth]\n  );\n\n  const footerClassName = buildClassName(\n    \"middle-column-footer\",\n    !renderingCanPost && \"no-composer\",\n    renderingCanPost && isNotchShown && !isSelectModeActive && \"with-notch\"\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList &&\n      !isSavedDialog &&\n      !renderingCanPost &&\n      !renderingCanRestartBot &&\n      !renderingCanStartBot &&\n      !renderingCanSubscribe &&\n      composerRestrictionMessage\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot ||\n      renderingCanSubscribe ||\n      renderingShouldSendJoinRequest ||\n      renderingCanStartBot ||\n      (isPinnedMessageList && canUnpin) ||\n      canShowOpenChatButton ||\n      renderingCanUnblock\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={`${className} ${\n        Boolean(!renderingChatId || !renderingThreadId) ? \"d-none\" : \"d-block\"\n      }`}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: #0A0A0A8C`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`\n      )}\n      onClick={isTablet && isLeftColumnShown ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={\n          customBackgroundValue\n            ? `--custom-background: ${customBackgroundValue}`\n            : undefined\n        }\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div\n            className=\"messages-layout\"\n            onDragEnter={renderingCanPost ? handleDragEnter : undefined}\n          >\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={\n                shouldSkipHistoryAnimations\n                  ? \"none\"\n                  : withInterfaceAnimations\n                  ? \"slide\"\n                  : \"fade\"\n              }\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={\n                  renderingOnPinnedIntersectionChange!\n                }\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>\n                        {lang(\"Chat.Pinned.UnpinAll\", pinnedMessagesCount, \"i\")}\n                      </span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang(\"SavedOpenChat\")}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>{composerRestrictionMessage}</span>\n                    </div>\n                  </div>\n                )}\n                {isMobile &&\n                  (renderingCanSubscribe ||\n                    (renderingShouldJoinToSend &&\n                      !renderingShouldSendJoinRequest)) && (\n                    <div\n                      className=\"middle-column-footer-button-container\"\n                      dir={lang.isRtl ? \"rtl\" : undefined}\n                    >\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        ripple\n                        className=\"composer-button join-subscribe-button\"\n                        onClick={handleSubscribeClick}\n                      >\n                        {lang(\n                          renderingIsChannel\n                            ? \"ProfileJoinChannel\"\n                            : \"ProfileJoinGroup\"\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(\"ChannelJoinRequest\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang(\"BotStart\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang(\"BotRestart\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang(\"Unblock\")}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal\n                  isOpen={isPrivacySettingsNoticeModalOpen}\n                />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && (\n                  <ChatLanguageModal isOpen={isChatLanguageModalOpen} />\n                )}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && (\n            <MobileSearch isActive={Boolean(isMobileSearchActive)} />\n          )}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      background: customBackground,\n      backgroundColor,\n      patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists,\n      isLeftColumnShown,\n      activeEmojiInteractions,\n      seenByModal,\n      giftPremiumModal,\n      reactorModal,\n      audioPlayer,\n      shouldSkipHistoryAnimations,\n      chatLanguageModal,\n      privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId\n      ? selectChatFullInfo(global, chatId)\n      : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(\n      !threadInfo?.isCommentsInfo && threadInfo?.fromChannelId\n    );\n    const canPost =\n      chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === \"pinned\";\n    const isMainThread =\n      messageListType === \"thread\" && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat &&\n        isMainThread &&\n        (isChannel || isChatSuperGroup(chat)) &&\n        chat.isNotJoined &&\n        !chat.joinRequests\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(\n      chat?.isNotJoined && chat.isJoinRequest\n    );\n    const isUserBlocked = isPrivate\n      ? selectIsUserBlocked(global, chatId)\n      : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID &&\n        !draftReplyInfo &&\n        chat.topics?.[GENERAL_TOPIC_ID]?.isClosed\n      : false;\n    const audioMessage =\n      audioChatId && audioMessageId\n        ? selectChatMessage(global, audioChatId, audioMessageId)\n        : undefined;\n\n    const isSavedDialog = getIsSavedDialog(\n      chatId,\n      threadId,\n      global.currentUserId\n    );\n    const canShowOpenChatButton =\n      isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread =\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin =\n      chat &&\n      (isPrivate ||\n        chat?.isCreator ||\n        (!isChannel && !isUserRightBanned(chat, \"pinMessages\")) ||\n        getHasAdminRight(chat, \"pinMessages\"));\n\n    const isContactRequirePremium = selectUserFullInfo(\n      global,\n      chatId\n    )?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList &&\n        (!chat || canPost) &&\n        !isBotNotStarted &&\n        !(shouldJoinToSend && chat?.isNotJoined) &&\n        !shouldBlockSendInForum &&\n        !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned:\n        isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader:\n        canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  })(MiddleColumn)\n);\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList =\n    prevTransitionKey !== undefined &&\n    prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === \"transform\" && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations\n      ? handleSlideTransitionStop\n      : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.voice!)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dates/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <div className='position-relative'>\n          <RightHeader\n            chatId={chatId}\n            threadId={threadId}\n            isColumnOpen={isOpen}\n            isProfile={isProfile}\n            isSearch={isSearch}\n            isManagement={isManagement}\n            isStatistics={isStatistics}\n            isMessageStatistics={isMessageStatistics}\n            isStickerSearch={isStickerSearch}\n            isGifSearch={isGifSearch}\n            isPollResults={isPollResults}\n            isCreatingTopic={isCreatingTopic}\n            isEditingTopic={isEditingTopic}\n            isAddingChatMembers={isAddingChatMembers}\n            profileState={profileState}\n            managementScreen={managementScreen}\n            onClose={close}\n            onScreenSelect={setManagementScreen}\n          />\n          <Transition\n            name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n            renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n            activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n            shouldCleanup\n            cleanupExceptionKey={\n              renderingContentKey === RightColumnContent.MessageStatistics\n                ? RightColumnContent.Statistics : undefined\n            }\n          >\n            {renderContent}\n          </Transition>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","globalSearch","accountResultIds","globalResultIds","localResults","peerIds","globalResults","timestampPlusDay","resultsByType","foundIds","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","profilePhotos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","chatIds","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","setReceipt","receipt","transaction","updateReceiptFromStarsTransaction","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","updateSharedMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","isSchedule","album","deleteMessageModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","mediaIndex","isAvatarView","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","localDb","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","globalThis","getLocalDb","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","fileName","audio","shouldSendAsSpoiler","ttlSeconds","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","loadChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","photoId","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lockScreen","oldLang","useLang","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","label","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","shouldDelayInit","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","isMessageListReady","useDerivedState","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","isRound","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAds","onReportAd","isRevenueSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isBot","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","checked","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","renderKeyboardButtonText","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","deletingUserId","setDeletingUserId","profileId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}