{"version":3,"file":"7768.2b1774f392808af19cd9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/hooks/useLang.ts","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const currentUnreadMentions = chat.unreadMentions || [];\n\n  const unreadMentions = currentUnreadMentions.filter((id) => !messageIds.includes(id));\n  const removedCount = currentUnreadMentions.length - unreadMentions.length;\n\n  global = updateChat(global, chat.id, {\n    ...(chat.unreadMentionsCount && {\n      unreadMentionsCount: Math.max(chat.unreadMentionsCount - removedCount, 0) || undefined,\n    }),\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const currentReplyInfo = selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: oldTranslate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateLocalTextSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    chats, users, messages,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateChats,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, appendStarsTransactions, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateReceiptFromStarsTransaction,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users,\n  } = result;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('getStarsReceipt', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return updateReceiptFromStarsTransaction(global, transaction, tabId);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(status.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(status.users, 'id'));\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice, updatePayment } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    withDynamicLoading, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiFactCheck,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiFormattedText,\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  return {\n    randomId: serializeBytes(randomId),\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Partial<GramJs.Message & GramJs.MessageService>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n  const factCheck = mtpMessage.factcheck && buildApiFactCheck(mtpMessage.factcheck);\n\n  const isInvertedMedia = mtpMessage.invertMedia;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n    factCheck,\n    isInvertedMedia,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiFactCheck(factCheck: GramJs.FactCheck): ApiFactCheck {\n  return {\n    shouldFetch: factCheck.needCheck,\n    hash: factCheck.hash.toString(),\n    text: factCheck.text && buildApiFormattedText(factCheck.text),\n    countryCode: factCheck.country,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    type = 'receipt';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n  isInvertedMedia?: true,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n    isInvertedMedia,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n    isInvertedMedia,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    isInvertedMedia,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.loadChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: Math.max(chat.unreadMentionsCount - 1, 0) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        {isSearchFocused &&\n          <DropdownMenu\n            trigger={MainButton}\n            footer={`${APP_NAME} ${versionString}`}\n            className={buildClassName(\n              'main-menu',\n              lang.isRtl && 'rtl',\n              shouldHideSearch && lang.isRtl && 'right-aligned',\n              shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n              /**\n               * TL - Trigger hide hamburger menu when search input focused in\n               */\n              isSearchFocused ? 'custom-dropdown-invisible' : 'custom-dropdown-visible',\n            )}\n            positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n            transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            {/* {menuItems} */}\n          </DropdownMenu>\n        }\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import {\n  addLocalizationCallback,\n  getTranslationFn,\n  type LangFn,\n} from '../util/localization';\nimport useEffectOnce from './useEffectOnce';\nimport useForceUpdate from './useForceUpdate';\n\nconst useLang = (): LangFn => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    return addLocalizationCallback(forceUpdate);\n  });\n\n  return getTranslationFn();\n};\n\nexport default useLang;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  shouldDelayInit?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  shouldDelayInit,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n        shouldDelayInit={shouldDelayInit}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  getIsMessageListReady: Signal<boolean>;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const isMessageListReady = useDerivedState(getIsMessageListReady);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        getIsMessageListReady={getIsMessageListReady}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !video.isRound);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix : boolean) {\n    return (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {/* {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )} */}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            getIsMessageListReady={getIsMessageListReady}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback((id: number, isGif?: boolean): void => {\n    const withDynamicLoading = !isGif && !isScheduled;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: true,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const {\n    photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !video?.isRound) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isRevenueSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n  areAdsEnabled,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from \"../../lib/teact/teact\";\nimport { getActions, withGlobal } from \"../../global\";\n\nimport type {\n  ApiChat,\n  ApiChatBannedRights,\n  ApiInputMessageReplyInfo,\n} from \"../../api/types\";\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from \"../../global/types\";\nimport type { ThemeKey, ThreadId } from \"../../types\";\nimport { MAIN_THREAD_ID } from \"../../api/types\";\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from \"../../config\";\nimport { requestMeasure, requestMutation } from \"../../lib/fasterdom/fasterdom\";\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from \"../../global/helpers\";\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from \"../../global/selectors\";\nimport buildClassName from \"../../util/buildClassName\";\nimport buildStyle from \"../../util/buildStyle\";\nimport captureEscKeyListener from \"../../util/captureEscKeyListener\";\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from \"../../util/windowEnvironment\";\nimport calculateMiddleFooterTransforms from \"./helpers/calculateMiddleFooterTransforms\";\n\nimport useAppLayout from \"../../hooks/useAppLayout\";\nimport useCustomBackground from \"../../hooks/useCustomBackground\";\nimport useForceUpdate from \"../../hooks/useForceUpdate\";\nimport useHistoryBack from \"../../hooks/useHistoryBack\";\nimport useLastCallback from \"../../hooks/useLastCallback\";\nimport useOldLang from \"../../hooks/useOldLang\";\nimport usePrevDuringAnimation from \"../../hooks/usePrevDuringAnimation\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport { useResize } from \"../../hooks/useResize\";\nimport useSyncEffect from \"../../hooks/useSyncEffect\";\nimport useWindowSize from \"../../hooks/window/useWindowSize\";\nimport usePinnedMessage from \"./hooks/usePinnedMessage\";\n\nimport Composer from \"../common/Composer\";\nimport PrivacySettingsNoticeModal from \"../common/PrivacySettingsNoticeModal.async\";\nimport SeenByModal from \"../common/SeenByModal.async\";\nimport UnpinAllMessagesModal from \"../common/UnpinAllMessagesModal.async\";\nimport GiftPremiumModal from \"../main/premium/GiftPremiumModal.async\";\nimport Button from \"../ui/Button\";\nimport Transition from \"../ui/Transition\";\nimport ChatLanguageModal from \"./ChatLanguageModal.async\";\nimport { DropAreaState } from \"./composer/DropArea\";\nimport EmojiInteractionAnimation from \"./EmojiInteractionAnimation.async\";\nimport FloatingActionButtons from \"./FloatingActionButtons\";\nimport MessageList from \"./MessageList\";\nimport MessageSelectToolbar from \"./MessageSelectToolbar.async\";\nimport MiddleHeader from \"./MiddleHeader\";\nimport MobileSearch from \"./MobileSearch.async\";\nimport PremiumRequiredPlaceholder from \"./PremiumRequiredPlaceholder\";\nimport ReactorListModal from \"./ReactorListModal.async\";\n\nimport \"./MiddleColumn.scss\";\nimport styles from \"./MiddleColumn.module.scss\";\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return (\n    item.kind === \"file\" &&\n    item.type &&\n    SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type)\n  );\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile\n    ? LAYER_ANIMATION_DURATION_MS\n    : undefined;\n  const hasTools =\n    hasPinned &&\n    (windowWidth < MOBILE_SCREEN_MAX_WIDTH ||\n      hasAudioPlayer ||\n      (isRightColumnShown &&\n        windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN &&\n        windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) ||\n      (!isMobile &&\n        hasButtonInHeader &&\n        windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES));\n\n  const renderingChatId = usePrevDuringAnimation(\n    chatId,\n    closeAnimationDuration\n  );\n  const renderingThreadId = usePrevDuringAnimation(\n    threadId,\n    closeAnimationDuration\n  );\n  const renderingMessageListType = usePrevDuringAnimation(\n    messageListType,\n    closeAnimationDuration\n  );\n  const renderingCanSubscribe = usePrevDuringAnimation(\n    canSubscribe,\n    closeAnimationDuration\n  );\n  const renderingCanStartBot = usePrevDuringAnimation(\n    canStartBot,\n    closeAnimationDuration\n  );\n  const renderingCanRestartBot = usePrevDuringAnimation(\n    canRestartBot,\n    closeAnimationDuration\n  );\n  const renderingCanUnblock = usePrevDuringAnimation(\n    canUnblock,\n    closeAnimationDuration\n  );\n  const renderingCanPost =\n    usePrevDuringAnimation(canPost, closeAnimationDuration) &&\n    !renderingCanRestartBot &&\n    !renderingCanStartBot &&\n    !renderingCanSubscribe &&\n    !renderingCanUnblock &&\n    chatId !== TMP_CHAT_ID &&\n    !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(\n    hasTools,\n    closeAnimationDuration\n  );\n  const renderingIsScrollDownShown =\n    usePrevDuringAnimation(isScrollDownShown, closeAnimationDuration) &&\n    chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(\n    isChannel,\n    closeAnimationDuration\n  );\n  const renderingShouldJoinToSend = usePrevDuringAnimation(\n    shouldJoinToSend,\n    closeAnimationDuration\n  );\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(\n    shouldSendJoinRequest,\n    closeAnimationDuration\n  );\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey =\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey\n      ? prevTransitionKey\n      : undefined;\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } =\n    useIsReady(\n      !shouldSkipHistoryAnimations && withInterfaceAnimations,\n      currentTransitionKey,\n      prevTransitionKey,\n      chatId,\n      isMobile\n    );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n          openChat({ id: undefined });\n        })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded =\n        visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle(\"keyboard-visible\", isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      visualViewport.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const { initResize, resetResize, handleMouseUp } = useResize(\n    leftColumnRef,\n    (n) =>\n      setLeftColumnWidth({\n        leftColumnWidth: n,\n      }),\n    resetLeftColumnWidth,\n    leftColumnWidth,\n    \"--left-column-width\"\n  );\n\n  const handleDragEnter = useLastCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      const { items } = e.dataTransfer || {};\n      const shouldDrawQuick =\n        items &&\n        items.length > 0 &&\n        Array.from(items)\n          // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n          // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n          .filter((item) => item.type !== \"text/uri-list\")\n          // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n          .every(isImage);\n\n      setDropAreaState(\n        shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document\n      );\n    }\n  );\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? lang(\"RequestToJoinChannelSentDescription\")\n          : lang(\"RequestToJoinGroupSentDescription\"),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: \"/start\" });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && \"has-header-tools\",\n    MASK_IMAGE_DISABLED ? \"mask-image-disabled\" : \"mask-image-enabled\"\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    \"messaging-disabled\",\n    !isSelectModeActive && \"shown\"\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang,\n    currentUserBannedRights,\n    defaultBannedRights\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    lang,\n    chat,\n    threadId,\n    Boolean(draftReplyInfo)\n  );\n\n  const composerRestrictionMessage =\n    messageSendingRestrictionReason ??\n    forumComposerPlaceholder ??\n    (isContactRequirePremium ? (\n      <PremiumRequiredPlaceholder userId={chatId!} />\n    ) : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth]\n  );\n\n  const footerClassName = buildClassName(\n    \"middle-column-footer\",\n    !renderingCanPost && \"no-composer\",\n    renderingCanPost && isNotchShown && !isSelectModeActive && \"with-notch\"\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList &&\n      !isSavedDialog &&\n      !renderingCanPost &&\n      !renderingCanRestartBot &&\n      !renderingCanStartBot &&\n      !renderingCanSubscribe &&\n      composerRestrictionMessage\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot ||\n      renderingCanSubscribe ||\n      renderingShouldSendJoinRequest ||\n      renderingCanStartBot ||\n      (isPinnedMessageList && canUnpin) ||\n      canShowOpenChatButton ||\n      renderingCanUnblock\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={`${className} ${\n        Boolean(!renderingChatId || !renderingThreadId) ? \"d-none\" : \"d-block\"\n      }`}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: #0A0A0A8C`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`\n      )}\n      onClick={isTablet && isLeftColumnShown ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={\n          customBackgroundValue\n            ? `--custom-background: ${customBackgroundValue}`\n            : undefined\n        }\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div\n            className=\"messages-layout\"\n            onDragEnter={renderingCanPost ? handleDragEnter : undefined}\n          >\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={\n                shouldSkipHistoryAnimations\n                  ? \"none\"\n                  : withInterfaceAnimations\n                  ? \"slide\"\n                  : \"fade\"\n              }\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={\n                  renderingOnPinnedIntersectionChange!\n                }\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>\n                        {lang(\"Chat.Pinned.UnpinAll\", pinnedMessagesCount, \"i\")}\n                      </span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang(\"SavedOpenChat\")}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>{composerRestrictionMessage}</span>\n                    </div>\n                  </div>\n                )}\n                {isMobile &&\n                  (renderingCanSubscribe ||\n                    (renderingShouldJoinToSend &&\n                      !renderingShouldSendJoinRequest)) && (\n                    <div\n                      className=\"middle-column-footer-button-container\"\n                      dir={lang.isRtl ? \"rtl\" : undefined}\n                    >\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        ripple\n                        className=\"composer-button join-subscribe-button\"\n                        onClick={handleSubscribeClick}\n                      >\n                        {lang(\n                          renderingIsChannel\n                            ? \"ProfileJoinChannel\"\n                            : \"ProfileJoinGroup\"\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(\"ChannelJoinRequest\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang(\"BotStart\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang(\"BotRestart\")}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div\n                    className=\"middle-column-footer-button-container\"\n                    dir={lang.isRtl ? \"rtl\" : undefined}\n                  >\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang(\"Unblock\")}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal\n                  isOpen={isPrivacySettingsNoticeModalOpen}\n                />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && (\n                  <ChatLanguageModal isOpen={isChatLanguageModalOpen} />\n                )}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && (\n            <MobileSearch isActive={Boolean(isMobileSearchActive)} />\n          )}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      background: customBackground,\n      backgroundColor,\n      patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists,\n      isLeftColumnShown,\n      activeEmojiInteractions,\n      seenByModal,\n      giftPremiumModal,\n      reactorModal,\n      audioPlayer,\n      shouldSkipHistoryAnimations,\n      chatLanguageModal,\n      privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId\n      ? selectChatFullInfo(global, chatId)\n      : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(\n      !threadInfo?.isCommentsInfo && threadInfo?.fromChannelId\n    );\n    const canPost =\n      chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === \"pinned\";\n    const isMainThread =\n      messageListType === \"thread\" && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat &&\n        isMainThread &&\n        (isChannel || isChatSuperGroup(chat)) &&\n        chat.isNotJoined &&\n        !chat.joinRequests\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(\n      chat?.isNotJoined && chat.isJoinRequest\n    );\n    const isUserBlocked = isPrivate\n      ? selectIsUserBlocked(global, chatId)\n      : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID &&\n        !draftReplyInfo &&\n        chat.topics?.[GENERAL_TOPIC_ID]?.isClosed\n      : false;\n    const audioMessage =\n      audioChatId && audioMessageId\n        ? selectChatMessage(global, audioChatId, audioMessageId)\n        : undefined;\n\n    const isSavedDialog = getIsSavedDialog(\n      chatId,\n      threadId,\n      global.currentUserId\n    );\n    const canShowOpenChatButton =\n      isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread =\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin =\n      chat &&\n      (isPrivate ||\n        chat?.isCreator ||\n        (!isChannel && !isUserRightBanned(chat, \"pinMessages\")) ||\n        getHasAdminRight(chat, \"pinMessages\"));\n\n    const isContactRequirePremium = selectUserFullInfo(\n      global,\n      chatId\n    )?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList &&\n        (!chat || canPost) &&\n        !isBotNotStarted &&\n        !(shouldJoinToSend && chat?.isNotJoined) &&\n        !shouldBlockSendInForum &&\n        !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned:\n        isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader:\n        canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  })(MiddleColumn)\n);\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList =\n    prevTransitionKey !== undefined &&\n    prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === \"transform\" && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations\n      ? handleSlideTransitionStop\n      : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dates/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <div className='position-relative'>\n          <RightHeader\n            chatId={chatId}\n            threadId={threadId}\n            isColumnOpen={isOpen}\n            isProfile={isProfile}\n            isSearch={isSearch}\n            isManagement={isManagement}\n            isStatistics={isStatistics}\n            isMessageStatistics={isMessageStatistics}\n            isStickerSearch={isStickerSearch}\n            isGifSearch={isGifSearch}\n            isPollResults={isPollResults}\n            isCreatingTopic={isCreatingTopic}\n            isEditingTopic={isEditingTopic}\n            isAddingChatMembers={isAddingChatMembers}\n            profileState={profileState}\n            managementScreen={managementScreen}\n            onClose={close}\n            onScreenSelect={setManagementScreen}\n          />\n          <Transition\n            name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n            renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n            activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n            shouldCleanup\n            cleanupExceptionKey={\n              renderingContentKey === RightColumnContent.MessageStatistics\n                ? RightColumnContent.Statistics : undefined\n            }\n          >\n            {renderContent}\n          </Transition>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","unreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","currentUnreadMentions","removedCount","unreadMentionsCount","markMessagesRead","previousChatId","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","isModalShown","currentChat","selectReplyCanBeSentToChat","replyToPeerId","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","setReceipt","receipt","transaction","updateReceiptFromStarsTransaction","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateSharedMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","shouldPreventComposerAnimation","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","quoteText","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","withDynamicLoading","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","loadChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lockScreen","oldLang","useLang","forceUpdate","useForceUpdate","useEffectOnce","addLocalizationCallback","getTranslationFn","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","label","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","shouldDelayInit","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","isMessageListReady","useDerivedState","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","isRound","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAds","onReportAd","isRevenueSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isBot","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","checked","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","renderKeyboardButtonText","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}